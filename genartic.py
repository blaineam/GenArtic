# -*- coding: utf-8 -*-
"""GenArtic Private

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HRpxztW8WJ1T9pQn708Mb7_Knx5pnnzI
"""
#@title PixRay Gradio UI
import sys
sys.path.append("pixray")
import gradio as gr
import torch
import emails
import shutil
import os, glob
import boto3

import numpy as np
from PIL import Image

from ISR.models import RDN, RRDN

from dotenv import load_dotenv
from pathlib import Path

dotenv_path = Path('/content/.env')
load_dotenv(dotenv_path=dotenv_path)
access_key = os.environ.get('AWS_ACCESS_KEY_ID')
access_secret = os.environ.get('AWS_SECRET_ACCESS_KEY')
endpoint=os.environ.get('S3_ENDPOINT')
bucket = os.environ.get('BUCKET')
ses_identity_sender = os.environ.get('SES_IDENTITY_SENDER')
ses_smtp_endpoint = os.environ.get('SES_SMTP_ENDPOINT')
ses_smtp_username = os.environ.get('SES_SMTP_USERNAME')
ses_smtp_password = os.environ.get('SES_SMTP_PASSWORD')

try:
  torch.cuda.empty_cache()
except:
  print("Inoring GPU Error")

session = boto3.session.Session()

client = session.client(
        service_name='s3',
        aws_access_key_id=access_key,
        aws_secret_access_key=access_secret,
        endpoint_url=endpoint,
)

def sync_to_s3(local_directory):
  destination = '/genartic/'

  print("syncing: ")
  print(local_directory)

  for root, dirs, files in os.walk(local_directory):
    for filename in files:
      local_path = os.path.join(root, filename)
      relative_path = os.path.relpath(local_path, local_directory)
      s3_path = os.path.join(destination,os.path.basename(os.path.normpath(local_directory)), relative_path)
      print(f'Searching "{s3_path}" in "{bucket}"')
      try:
        client.head_object(Bucket=bucket, Key=s3_path)
        print(f'Path found on S3! Skipping {s3_path}...')
      except:
        print(f'Uploading {s3_path}...')
        client.upload_file(local_path, bucket, s3_path)

def notify(recipient, prompt, imagepath, videopath):
  sender = ses_identity_sender
  image = """%s/%s/genartic/%s""" % (endpoint,bucket,imagepath)
  video = """%s/%s/genartic/%s""" % (endpoint,bucket,videopath)

  body = """<p>Thank you for using GenArtic to create artwork for your prompt: </p>
  <br /><p>%s</p>
  <br />
  <br />
  <a href="%s">
  <img src="%s" />
  <br />Final Generated Image</a>
  <br />
  <br /><a href="%s">Video of all iterations</a>
  """ % (prompt, image, image, video)
  message = emails.html(
      html = body,
      subject = "GenArtic Generation is complete",
      mail_from = sender,
  )

  # Now you can send the email!
  r = message.send(
      to = recipient,
      smtp = {
          "host": ses_smtp_endpoint,
          "port": 587,
          "timeout": 5,
          "user": ses_smtp_username,
          "password": ses_smtp_password,
          "tls": True,
      },
  )

def sr_image(image_path):
  try:
    img = Image.open(image_path)
    img.resize(size=(int(img.size[0]*4), int(img.size[1]*4)), resample=Image.BICUBIC)
    model = RRDN(weights='gans')
    sr_img = model.predict(np.array(img), by_patch_of_size=50)
    im = Image.fromarray(sr_img)
    im.save(image_path)
  except Exception as e:
      print(e)
      print("Cannot upscale image")

# Define the main function
def generate(email, prompt, quality, style, aspect):
    import pixray
    if style == 'pixel':
      pixray.run(prompts=prompt,
                        drawer="pixel",
                        aspect=aspect,
                        quality=quality,
                        iterations=100,
                        init_noise="snow",
                        make_video=True)

    if style == 'painting':
      pixray.run(prompts=prompt,
                        drawer="vqgan",
                        vqgan_model="coco",
                        aspect=aspect,
                        quality=quality,
                        iterations=100,
                        init_noise="snow",
                        make_video=True)

    if style == 'clipdraw':
      pixray.run(prompts=prompt,
                        drawer="clipdraw",
                        aspect=aspect,
                        quality=quality,
                        iterations=100,
                        init_noise="snow",
                        make_video=True)

    if style == 'line_sketch':
      pixray.run(prompts=prompt,
                        drawer="line_sketch",
                        aspect=aspect,
                        quality=quality,
                        iterations=100,
                        init_noise="snow",
                        make_video=True)

    if style == 'image':
      pixray.run(prompts=prompt,
                        drawer="vqgan",
                        vqgan_model="imagenet_f16_16384",
                        aspect=aspect,
                        quality=quality,
                        iterations=100,
                        init_noise="snow",
                        make_video=True)

    if style == 'wikiart':
      pixray.run(prompts=prompt,
                        drawer="vqgan",
                        vqgan_model="wikiart_16384",
                        aspect=aspect,
                        quality=quality,
                        iterations=100,
                        init_noise="snow",
                        make_video=True)


    try:
      torch.cuda.empty_cache()
    except:
      print("Inoring GPU Error")

    # Find latest
    outdir=max(glob.glob(os.path.join("outputs", '*/')), key=os.path.getmtime)

    imagepath = os.path.join(outdir, 'output.png')
    videopath = os.path.join(outdir, 'output.mp4')

    sr_image(imagepath)

    try:
      shutil.rmtree(os.path.join(outdir, "video"), True)
      shutil.rmtree(os.path.join(outdir, "steps"), True)
      sync_to_s3(outdir)
    except:
      print("Inoring S3 Error")

    try:
      notify(email, prompt, os.path.join(os.path.basename(os.path.normpath(outdir)),os.path.basename(imagepath)), os.path.join(os.path.basename(os.path.normpath(outdir)),os.path.basename(videopath)))
    except:
      print("Inoring SES Error")

    return imagepath, videopath

# Create the UI
email = gr.Textbox(placeholder="youremail@youremail.com", label="Your Email Address to receive the completed generations")
prompt = gr.Textbox(value="Underwater city", label="Text Prompt")
quality = gr.Radio(choices=['draft', 'normal', 'better', 'best'], label="Quality")
style = gr.Radio(choices=[
    'image',
    'painting',
    'wikiart'
# wait untill pixray (diffvg) adds support for cuda 11
#     'pixel',
#     'clipdraw',
#     'line_sketch'
], label="Type")
aspect = gr.Radio(choices=['square', 'widescreen','portrait'], label="Size")

# Launch the demo
iface = gr.Interface(fn=generate, inputs=[email, prompt, quality, style, aspect], outputs=[gr.Image(), gr.PlayableVideo()],live=False)
iface.launch(debug=True, share=True, enable_queue=True, server_port=8873, server_name="0.0.0.0")
